## 🔍 Fuzzy Matching Explained

A key part of this agent is detecting patients even if there’s a **typo in their name**. This is done using:

```python
from difflib import SequenceMatcher
score = SequenceMatcher(None, input_name.lower(), db_name.lower()).ratio()
```

### 1. How `SequenceMatcher().ratio()` Works

It’s **mathematics, not randomness**:

$$
\text{ratio} = \frac{2 \times M}{T}
$$

* **M** = number of matching characters (in order)
* **T** = total characters across both strings

👉 Example:

* DB: `"Vidur Bera"` (10 chars)
* Input: `"Vidurr Beraa"` (12 chars)
* Matching subsequence = `"Vidur Bera"` (10 chars)

$$
M = 10, \; T = 10 + 12 = 22
$$

$$
\text{ratio} = \frac{2 \times 10}{22} = 0.91
$$

Score = **0.91 → high similarity** ✅

---

### 2. Why AI-like?

Instead of `==` exact match, it measures **closeness**:

* `"Vidur Bera"` vs `"Vidurr Beraa"` → 0.91
* `"Vidur Bera"` vs `"Vidur Bora"` → 0.95
* `"Vidur Bera"` vs `"Anita Rao"` → 0.0

This mimics human reasoning: we know `"Vidurr Beraa"` is probably `"Vidur Bera"`.

---

### 3. AI Evidence with DOB Rule

The agent combines **fuzzy score + DOB**:

```python
if r_dob == dob_val and name_score > 0.7:
    return returning
```

* If DOB matches **and** name\_score > 0.7 → Returning patient.
* Else → New patient.

This hybrid logic = **AI heuristic (rules + similarity measure)**.

---

### 4. Why `"name_score":1` but `"combined":0.7`?

* Sometimes the name is an exact match → score = 1.0.
* But the system applies a **threshold (0.7)** to confirm.
* So `"combined":0.7` means: the system’s **confidence threshold** for recognition.

---

## 📊 Example Experiments

We validated the agent with three experiments:

1. **Returning patient (exact email match)** → Found instantly.
2. **Returning patient (typo in name, DOB match)** → Fuzzy score > 0.7, recognized correctly.
3. **New patient** → No match, created a new record, sent intake form.

All three confirm the system’s logic is working correctly.
