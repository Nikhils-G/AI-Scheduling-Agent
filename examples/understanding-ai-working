🔍 Fuzzy Matching Explained

A key part of this agent is detecting patients even if there’s a typo in their name. This is done using:

from difflib import SequenceMatcher
score = SequenceMatcher(None, input_name.lower(), db_name.lower()).ratio()

1. How SequenceMatcher().ratio() Works

It’s mathematics, not randomness:

ratio
=
2
×
𝑀
𝑇
ratio=
T
2×M
	​


M = number of matching characters (in order)

T = total characters across both strings

👉 Example:

DB: "Vidur Bera" (10 chars)

Input: "Vidurr Beraa" (12 chars)

Matching subsequence = "Vidur Bera" (10 chars)

𝑀
=
10
,
  
𝑇
=
10
+
12
=
22
M=10,T=10+12=22
ratio
=
2
×
10
22
=
0.91
ratio=
22
2×10
	​

=0.91

Score = 0.91 → high similarity ✅

2. Why AI-like?

Instead of == exact match, it measures closeness:

"Vidur Bera" vs "Vidurr Beraa" → 0.91

"Vidur Bera" vs "Vidur Bora" → 0.95

"Vidur Bera" vs "Anita Rao" → 0.0

This mimics human reasoning: we know "Vidurr Beraa" is probably "Vidur Bera".

3. AI Evidence with DOB Rule

The agent combines fuzzy score + DOB:

if r_dob == dob_val and name_score > 0.7:
    return returning


If DOB matches and name_score > 0.7 → Returning patient.

Else → New patient.

This hybrid logic = AI heuristic (rules + similarity measure).

4. Why "name_score":1 but "combined":0.7?

Sometimes the name is an exact match → score = 1.0.

But the system applies a threshold (0.7) to confirm.

So "combined":0.7 means: the system’s confidence threshold for recognition.

📊 Example Experiments

We validated the agent with three experiments:

Returning patient (exact email match) → Found instantly.

Returning patient (typo in name, DOB match) → Fuzzy score > 0.7, recognized correctly.

New patient → No match, created a new record, sent intake form.

All three confirm the system’s logic is working correctly.
